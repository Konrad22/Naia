#
# WML variable operations library
#
# codename Naia - Project Ethea phase 1 campaigns shared library
# Copyright (C) 2006 - 2017 by Ignacio R. Morelle <shadowm@wesnoth.org>
#
# See COPYING for usage terms.
#

#define VARIABLE_FROM_STRLEN _VAR _VALUE
    [set_variable]
        name={_VAR}
        string_length={_VALUE}
    [/set_variable]
#enddef

#define VARIABLE_RANDOM _VAR _VALUE
    [set_variable]
        name={_VAR}
        rand={_VALUE}
    [/set_variable]
#enddef

#define VARIABLE_EVAL_CONDITIONAL _VAR _COND
    [set_conditional_variable]
        name={_VAR}
        [condition]
            {_COND}
        [/condition]
    [/set_conditional_variable]
#enddef

#define VARIABLE_LEXICAL_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        equals={_VALUE}
    [/variable]
#enddef

#define VARIABLE_LEXICAL_NOT_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        not_equals={_VALUE}
    [/variable]
#enddef

#define VARIABLE_LEXICAL_CONTAINS _VAR _VALUE
    [variable]
        name={_VAR}
        contains={_VALUE}
    [/variable]
#enddef

#define VARIABLE_BOOLEAN_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        boolean_equals={_VALUE}
    [/variable]
#enddef

#define VARIABLE_BOOLEAN_NOT_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        boolean_not_equals={_VALUE}
    [/variable]
#enddef

#define VARIABLE_ARRAY_NOT_EMPTY VAR_ID
    [variable]
        name={VAR_ID}+".length"
        numerical_not_equals=0
    [/variable]
#enddef

#define BREAK _VAR
    # Macro to break out of a FOREACH loop.
    # NOTE: the number used here is meant to be greater than or equa
    # to game_config::max_loop!
    {VARIABLE {_VAR} 99999}
#enddef

# wmllint: unbalanced-on

# wmlindent: start ignoring
#define REVERSE_FOREACH _ARRAY_VALUE _VAR
    # Macro to begin a WML clause that iterates over an array in reverse.
    {VARIABLE {_VAR} "$(${_ARRAY_VALUE}.length - 1)"}
    [while]
        [variable]
            name={_VAR}
            greater_than_equal_to=0
        [/variable]
        [do]
#enddef

#define REVERSE_NEXT _VAR
    # Macro to end a WML clause that iterates over an array in reverse.
            [set_variable]
                name={_VAR}
                sub=1
            [/set_variable]
        [/do]
    [/while]
    {CLEAR_VARIABLE {_VAR}}
#enddef
# wmlindent: stop ignoring

#define REVERSE_BREAK _VAR
    # Macro to break out of a REVERSE_FOREACH loop.
    {VARIABLE {_VAR} -1}
#enddef

# wmlindent: start ignoring
#ifver WESNOTH_VERSION > 1.13.1

#define FOR _VAR _INITIAL _LAST
    [for]
        variable={_VAR}
        start,end={_INITIAL},{_LAST}        [do]
#enddef

# wmlxgettext: [/do]
# wmlxgettext: [/for]

#else

#define FOR _VAR _INITIAL _LAST
    {VARIABLE {_VAR} {_INITIAL} }
    [while]
        [variable]
            name={_VAR}
            numerical_not_equals="$(1 + "+{_LAST}+")"
        [/variable]
        [do]
#enddef

#endif
# wmlindent: stop ignoring

# wmlxgettext: [/do]
# wmlxgettext: [/while]

# wmllint: unbalanced-off

# wmlindent: opener "{REVERSE_FOREACH "
# wmlindent: opener "{FOR "
# wmlindent: closer "{REVERSE_NEXT "

#
# ConditionalWML that always yields a true value.
#
#define TRUE
    [true][/true]
#enddef

#
# ConditionalWML that always yields a false value.
#
#define FALSE
    [false][/false]
#enddef
